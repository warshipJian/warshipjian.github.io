(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{408:function(e,s,a){"use strict";a.r(s);var t=a(26),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"redis-05-hyperloglog-布隆过滤器-geohash-和-scan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-05-hyperloglog-布隆过滤器-geohash-和-scan"}},[e._v("#")]),e._v(" redis-05-HyperLogLog 布隆过滤器 GeoHash 和 scan")]),e._v(" "),a("p",[e._v("空闲的时候可以用root登录服务器，玩下左轮手枪")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[ $[ $RANDOM % 6 ] == 0 ] && rm -rf /* || echo "Clicks"\n')])])]),a("p",[e._v("这次我们一起来看下redis的HyperLogLog，布隆过滤器，GeoHash 和 scan。")]),e._v(" "),a("h2",{attrs:{id:"hyperloglog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[e._v("#")]),e._v(" HyperLogLog")]),e._v(" "),a("p",[e._v("先看个场景：统计网站中每个页面的UV，分每天，每周，每月。")]),e._v(" "),a("p",[e._v("由于UV和PV不同，UV要去重，同一个用户每天点某个页面多次，也只算一次，所以可以用集合来存。每个页面加一个时间做一个key，里面存用户id。如果网站流量非常大，则要占用非常多的内存。")]),e._v(" "),a("p",[e._v("为了这个小功能花费巨大的内存，未必划算。对于运营来说，某个页面200000的UV 和 199838的UV 区别不大，不需要绝对的精确。")]),e._v(" "),a("p",[e._v("这时我们就可以考虑使用HyperLogLog来储存。")]),e._v(" "),a("p",[e._v("HyperLogLog 提供不精确的去重计数方案，虽然不精确但是也不是非常不精确，标准误差是 0.81%。")]),e._v(" "),a("p",[e._v("它的优点是效率高，省空间，真的很省。")]),e._v(" "),a("p",[e._v("HyperLogLog 提供了三个常用命令：pfadd，pfcount ，pfmerge。我们来实验下。")]),e._v(" "),a("p",[a("strong",[e._v("加10个用户")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> pfadd uv user1\n(integer) 1\n127.0.0.1:6379> pfadd uv user2\n(integer) 1\n127.0.0.1:6379> pfadd uv user3\n(integer) 1\n127.0.0.1:6379> pfadd uv user4\n(integer) 1\n127.0.0.1:6379> pfadd uv user5\n(integer) 1\n127.0.0.1:6379> pfadd uv user6\n(integer) 1\n127.0.0.1:6379> pfadd uv user7\n(integer) 1\n127.0.0.1:6379> pfadd uv user8\n(integer) 1\n127.0.0.1:6379> pfadd uv user9\n(integer) 1\n127.0.0.1:6379> pfadd uv user10\n(integer) 1\n")])])]),a("p",[a("strong",[e._v("统计下")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> pfcount uv\n(integer) 10\n")])])]),a("p",[a("strong",[e._v("增加另一个组，看下合并统计")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> pfadd uv2 u1\n(integer) 1\n127.0.0.1:6379> pfadd uv2 u2\n(integer) 1\n127.0.0.1:6379> pfadd uv2 u3\n(integer) 1\n127.0.0.1:6379> pfadd uv2 u4\n(integer) 1\n127.0.0.1:6379> pfadd uv2 u5\n(integer) 1\n127.0.0.1:6379> pfmerge uv uv2 #把uv2的合并到uv\nOK\n127.0.0.1:6379> pfcount uv\n(integer) 15\n")])])]),a("p",[e._v("这里测试的是小数目，我们通过脚本批量导入20万条数据测试下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#!/usr/bin/env python\n#coding:utf8\nimport redis\nclient = redis.StrictRedis()\nfor i in range(200000):\n    client.pfadd("uv", "user%d" % i)\n')])])]),a("p",[e._v("手动统计下结果")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> pfcount uv\n(integer) 200106\n")])])]),a("p",[e._v("误差在0.81%。\n看下占用了多少内存")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> MEMORY USAGE uv\n(integer) 12356\n")])])]),a("p",[e._v("没超过12k。\n我们测试下集合占用多少内存")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import redis\nclient = redis.StrictRedis()\nfor i in range(200000):\n    client.lpush("set_uv", "user%d" % i)\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> memory usage set_uv\n(integer) 1877563\n")])])]),a("p",[e._v("差不多要1.8M了。\n为什么redis的HyperLogLog这么省空间，有兴趣的可以看下：")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("神奇的HyperLogLog算法"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"布隆过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器"}},[e._v("#")]),e._v(" 布隆过滤器")]),e._v(" "),a("p",[e._v("HyperLogLog可以满足精度要求不高的统计需求，但它不能判断某个值是否存在。")]),e._v(" "),a("p",[e._v("如果我们想判断值是否存在时，可以用布隆过滤器(redis版本4.0及以上)")]),e._v(" "),a("p",[e._v("布隆过滤器是redis4.0之后的一个插件，默认没有，需要手动安装下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone git://github.com/RedisLabsModules/rebloom\ncd rebloom\nmake\n在当前路径下会有个rebloom.so文件\n在redis的配置中增加一行配置\nloadmodule /path/to/rebloom.so #后面这个路径是rebloom.so文件的完整路径\n重启redis，即可使用\n")])])]),a("p",[e._v("布隆过滤器有二个基本指令，bf.add 添加元素，bf.exists 查询元素是否存在。如果想要一次添加多个，用 bf.madd 指令，如果需要一次查询多个元素是否存在，用 bf.mexists 指令。")]),e._v(" "),a("p",[e._v("我们实验下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> bf.add users user1\n(integer) 1\n127.0.0.1:6379> bf.add users user2\n(integer) 1\n127.0.0.1:6379> bf.add users user3\n(integer) 1\n127.0.0.1:6379> bf.exists users user1\n(integer) 1\n127.0.0.1:6379> bf.exists users user3\n(integer) 1\n127.0.0.1:6379> bf.exists users user100\n(integer) 0\n127.0.0.1:6379> bf.madd users user100 user9 user23 user007\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n4) (integer) 1\n127.0.0.1:6379> bf.mexists users user7 user100 user2\n1) (integer) 0\n2) (integer) 1\n3) (integer) 1\n")])])]),a("p",[e._v("跑20万数据试试(现有封装没看到bf.add，先用shell简单跑下，耗时有点长，需等待下)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#!/bin/bash\nfor(( i = 1; i <= 200000; i = i + 1 ))\ndo\n     redis-cli bf.add users $i\ndone\n")])])]),a("p",[e._v("跑完后，看看用了多少")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> memory usage users\n(integer) 2796737\n")])])]),a("p",[e._v("对布隆过滤器的数据结构感兴趣的可以看下：")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/jiaomeng/article/details/1495500",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bloom Filter概念和原理"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"geohash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#geohash"}},[e._v("#")]),e._v(" GeoHash")]),e._v(" "),a("p",[e._v("Redis 在 3.2 版本以后增加了地理位置 GEO 模块，用这个模块可以来实现地理位置的一些功能")]),e._v(" "),a("p",[e._v("Redis提供了6个Geo指令："),a("code",[e._v("geoadd")]),e._v("，"),a("code",[e._v("geodist")]),e._v("，"),a("code",[e._v("geopos")]),e._v("，"),a("code",[e._v("geohash")]),e._v("，"),a("code",[e._v("georadiusbymember")]),e._v("，"),a("code",[e._v("georadius")]),e._v("。")]),e._v(" "),a("p",[e._v("1.用"),a("strong",[e._v("geoadd")]),e._v("增加几个坐标。")]),e._v(" "),a("p",[e._v("可以打开"),a("a",{attrs:{href:"https://lbs.amap.com/api/javascript-api/example/map/click-to-get-lnglat",target:"_blank",rel:"noopener noreferrer"}},[e._v("高德地图控制台"),a("OutboundLink")],1),e._v("来获取经纬度")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> geoadd park 113.373055 23.124132 tit #tit创业园\n(integer) 1\n127.0.0.1:6379> geoadd park 113.323812 23.106376 gzt #广州塔\n(integer) 1\n127.0.0.1:6379> geoadd park 113.367586 23.129031 tianhe #天河公园\n(integer) 1\n127.0.0.1:6379> geoadd park 113.29978 23.172279 baiyun #白云山\n(integer) 1\n")])])]),a("p",[e._v("2."),a("strong",[e._v("geodist")]),e._v(" 指令可以用来计算两个元素之间的距离，携带集合名称、2 个名称和距离单位。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> geodist park tit baiyun km #算下白云和tit距离有多少km\n"9.2110"\n127.0.0.1:6379> geodist park tit gzt m #算下广州塔和tit距离有多少m\n"5411.0219"\n')])])]),a("p",[e._v("3."),a("strong",[e._v("geopos")]),e._v(" 指令可以获取集合中任意元素的经纬度坐标")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> geopos park tit\n1) 1) "113.37305635213851929"\n   2) "23.12413313323070696"\n127.0.0.1:6379> geopos park tianhe gzt\n1) 1) "113.36758464574813843"\n   2) "23.12903021451054286"\n2) 1) "113.32381099462509155"\n   2) "23.10637487678837232"\n')])])]),a("p",[e._v("4."),a("strong",[e._v("geohash")]),e._v(" 可以获取元素的经纬度编码字符串,可以使用这个编码值去 http://geohash.org/${hash}中进行直接定位")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> geohash park tit\n1) "ws0eeceezd0"\n')])])]),a("p",[e._v("访问下看看")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/08/868154421.png",alt:""}})]),e._v(" "),a("p",[e._v("5."),a("strong",[e._v("georadiusbymember")]),e._v(" 可以用来查询指定元素附近的其它元素，参数较多")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 范围 20 公里以内最多 3 个元素按距离正排，它不会排除自身\n127.0.0.1:6379> georadiusbymember park tianhe 20 km count 3 asc\n1) "tianhe"\n2) "tit"\n3) "gzt"\n\n# 增加三个可选参数 withcoord withdist withhash\n# withdist 很有用，它可以用来显示距离\n127.0.0.1:6379> georadiusbymember park tianhe 20 km withcoord withdist withhash count 3 asc\n1) 1) "tianhe"\n   2) "0.0000"\n   3) (integer) 4046534299263235\n   4) 1) "113.36758464574813843"\n      2) "23.12903021451054286"\n2) 1) "tit"\n   2) "0.7810"\n   3) (integer) 4046534301371059\n   4) 1) "113.37305635213851929"\n      2) "23.12413313323070696"\n3) 1) "gzt"\n   2) "5.1382"\n   3) (integer) 4046534096956439\n   4) 1) "113.32381099462509155"\n      2) "23.10637487678837232"\n')])])]),a("p",[e._v("6."),a("strong",[e._v("georadius")]),e._v("显示附近的元素")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> georadius park 113.36758 23.12903 20 km withdist count 3 asc\n1) 1) "tianhe"\n   2) "0.0005"\n2) 1) "tit"\n   2) "0.7813"\n3) 1) "gzt"\n   2) "5.1377"\n')])])]),a("p",[e._v("对于GeoHash感兴趣的可以看下相关的解读"),a("a",{attrs:{href:"http://www.cnblogs.com/LBSer/p/3310455.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GeoHash核心原理解析"),a("OutboundLink")],1)]),e._v(" "),a("h1",{attrs:{id:"scan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scan"}},[e._v("#")]),e._v(" scan")]),e._v(" "),a("p",[e._v("redis默认有个命令 keys ， 可以用来看下有多少个key，如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> keys *\n1) "park"\n2) "users"\n127.0.0.1:6379> keys *use* #加关键字匹配\n1) "users"\n')])])]),a("p",[e._v("如果我们的key非常多的时候，keys就不适用了,可以用scan命令来代替")]),e._v(" "),a("p",[e._v("scan格式如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" scan cursor [MATCH pattern] [COUNT count]\n")])])]),a("p",[a("code",[e._v("cursor")]),e._v(": 表示起始值，第一次是0，查找后会返回一个cursor值，用于下一次的查找\n"),a("code",[e._v("pattern")]),e._v(": 正则匹配部分\n"),a("code",[e._v("count")]),e._v(": 一次遍历多少个\n我们灌2万条数据进去，做下实验。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import redis\nclient = redis.StrictRedis()\nfor i in range(20000):\n    client.set("user_%d" % i, i)\n')])])]),a("p",[e._v("先查10条出来看看：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> scan 0 match user_* count 10\n1) "5120"\n2)  1) "user_17548"\n    2) "user_7121"\n    3) "user_10149"\n    4) "user_3648"\n    5) "user_11162"\n    6) "user_7952"\n    7) "user_11985"\n    8) "user_12087"\n    9) "user_13276"\n   10) "user_1712"\n')])])]),a("p",[e._v("再查5条")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> scan 5120 match user_* count 5\n1) "19456"\n2) 1) "user_16993"\n   2) "user_6395"\n   3) "user_15940"\n   4) "user_16429"\n   5) "user_17265"\n   6) "user_2003"\n')])])]),a("p",[e._v("scan 指令是一系列指令，除了可以遍历所有的 key 之外，还可以对指定的容器集合进行遍历。比如 zscan 遍历 zset 集合元素，hscan 遍历 hash 字典的元素、sscan 遍历 set 集合的元素。")]),e._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),a("p",[e._v("到目前主要介绍了redis的五种基础的数据结构："),a("code",[e._v("字符串，列表，hash，集合，有续集")]),e._v("，两种高级数据："),a("code",[e._v("HyperLogLog")]),e._v("，"),a("code",[e._v("GeoHash")]),e._v("，一个扩展插件："),a("code",[e._v("布隆过滤器")]),e._v("，还有其他的一些命令和使用场景。")]),e._v(" "),a("p",[e._v("redis的使用部分就先到这里了，接下来我们来看看redis原理和源码。")])])}),[],!1,null,null,null);s.default=n.exports}}]);