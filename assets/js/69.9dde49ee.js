(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{427:function(t,a,e){"use strict";e.r(a);var s=e(26),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" git命令")]),t._v(" "),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log # 查看修改记录\n\ngit diff # 对比\n\ngit status # 查看当前状态\n\ngit clone xxxx # 复制代码到本地\n\ngit checkout  xxx #  切换到某个分支\n\ngit commit -am '提交备注' # 提交到本地分支\n\ngit push  # 提交到远程分支\n\ngit fetch # 更新远程分支代码到本地\n\ngit pull # 更新远程分支代码到本地,并合并\n\ngit branch xxx # 创建分支\n\ngit branch -d xxx # 删除分支\n\ngit merge xxx # 合并分支\n\ngit push origin test:test # 将本地新建的分支提交到远程\n\ngit stash #  将当前修改存入后台 (可以用于去除当前的修改)\n\ngit stash pop # 将存入后台的修改取出\n")])])]),e("h2",{attrs:{id:"标签使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签使用"}},[t._v("#")]),t._v(" 标签使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git tag -a v1.1 -m '第一个版本'  # 创建一个标签\n \ngit tag # 查看标签\n\ngit show v1.1 # 查看标签详情\n\ngit checkout v1.1 # 检出某个标签 ，比如用于回滚\n\ngit checkout master # 从标签中返回原分支\n")])])]),e("h2",{attrs:{id:"gitignore文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore文件"}},[t._v("#")]),t._v(" gitignore文件")]),t._v(" "),e("p",[t._v("在根目录下创建一个.gitignore文件，用于排除不需要提交到git仓库的文件\n如")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/Log\n/Temp\nvendor/*\n!vendor/easyswoole/\n/.idea\n.env\n")])])]),e("p",[t._v("排除"),e("code",[t._v("Log")]),t._v(","),e("code",[t._v("Temp")]),t._v(","),e("code",[t._v(".idea")]),t._v("目录，排除"),e("code",[t._v(".env")]),t._v("文件，排除"),e("code",[t._v("vendor")]),t._v("目录但不排除该目录下的"),e("code",[t._v("easyswoole")]),t._v("目录。")]),t._v(" "),e("h2",{attrs:{id:"gitignore无效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore无效"}},[t._v("#")]),t._v(" gitignore无效")]),t._v(" "),e("p",[t._v("有时会遇到在gitignore做了修改，但修改无效时，可以尝试使用如下命令清下缓存，重新提交。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rm -r --cached .\ngit add .\ngit commit -m 'fix'\n")])])]),e("h2",{attrs:{id:"远程分支被别人删除了，本地还有显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程分支被别人删除了，本地还有显示"}},[t._v("#")]),t._v(" 远程分支被别人删除了，本地还有显示")]),t._v(" "),e("p",[t._v("要删除本地，可使用如下命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote prune origin\ngit fetch --prune\n")])])]),e("h2",{attrs:{id:"恢复被删除的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复被删除的文件"}},[t._v("#")]),t._v(" 恢复被删除的文件")]),t._v(" "),e("p",[t._v("如果清楚知道commit_id ，使用如下命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout commit_id -- file_name\n")])])]),e("p",[t._v("不加commit_id时，则会将该文件恢复到最新提交的那次")])])}),[],!1,null,null,null);a.default=n.exports}}]);