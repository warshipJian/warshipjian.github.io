(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{400:function(a,t,e){"use strict";e.r(t);var r=e(26),o=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"浅谈http中的cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浅谈http中的cache-control"}},[a._v("#")]),a._v(" 浅谈http中的Cache-Control")]),a._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("p",[a._v("我们用http访问时，会先发送一个请求，之后服务器返回一个应答，在Chrome的调试器(按F12或右击选择检查)中展现了整个过程：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/778205289.png",alt:"cache1.png"}})]),a._v(" "),e("p",[a._v("第一部分General是概要，包含请求地址，请求方式，状态码，服务器地址以及Referrer 策略。")]),a._v(" "),e("p",[a._v("第二部分是应答头部，是服务器返回的。")]),a._v(" "),e("p",[a._v("第三部分是请求头部，是客户端发送的。")]),a._v(" "),e("p",[a._v("这次我们从两个角度来看看http的缓存：缓存控制和缓存校验。")]),a._v(" "),e("p",[e("strong",[a._v("缓存控制")]),a._v("：控制缓存的开关，用于标识请求或访问中是否开启了缓存，使用了哪种缓存方式。")]),a._v(" "),e("p",[e("strong",[a._v("缓存校验")]),a._v("：如何校验缓存，比如怎么定义缓存的有效期，怎么确保缓存是最新的。")]),a._v(" "),e("h2",{attrs:{id:"缓存控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存控制"}},[a._v("#")]),a._v(" 缓存控制")]),a._v(" "),e("p",[a._v("在http中，控制缓存开关的字段有两个：Pragma 和 Cache-Control。")]),a._v(" "),e("h3",{attrs:{id:"pragma"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pragma"}},[a._v("#")]),a._v(" Pragma")]),a._v(" "),e("p",[a._v("Pragma有两个字段Pragma和Expires。Pragma的值为no-cache时，表示禁用缓存，Expires的值是一个GMT时间，表示该缓存的有效时间。")]),a._v(" "),e("p",[a._v("Pragma是旧产物，已经逐步抛弃，有些网站为了向下兼容还保留了这两个字段。如果一个报文中同时出现Pragma和Cache-Control时，以Pragma为准。同时出现Cache-Control和Expires时，以Cache-Control为准。即优先级从高到低是 "),e("strong",[a._v("Pragma -> Cache-Control -> Expires")])]),a._v(" "),e("h3",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[a._v("#")]),a._v(" Cache-Control")]),a._v(" "),e("p",[a._v("在介绍之前，先啰嗦两个容易忽视的地方：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("符合缓存策略时，服务器不会发送新的资源，但不是说客户端和服务器就没有会话了，客户端还是会发请求到服务器的。")])]),a._v(" "),e("li",[e("p",[a._v("Cache-Control除了在响应中使用，在请求中也可以使用。我们用调试器来模拟下请求时带上Cache-Control：勾选Disable cache，刷新页面，可以看到Request Headers中有个字段Cache-Control: no-cache。")])])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/3207692339.png",alt:"cache2.png"}})]),a._v(" "),e("p",[a._v("同时在Response Headers中也能到Cache-Control字段，它的值是must-revalidate，这是服务端设置的。")]),a._v(" "),e("h4",{attrs:{id:"cache-control字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control字段"}},[a._v("#")]),a._v(" Cache-Control字段")]),a._v(" "),e("p",[a._v("在请求中使用Cache-Control 时，它可选的值有：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/2681852969.jpg",alt:"cache3.jpg"}})]),a._v(" "),e("p",[a._v("在响应中使用Cache-Control 时，它可选的值有：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/2153187031.png",alt:"cache4.png"}})]),a._v(" "),e("p",[e("strong",[a._v("no-store优先级最高")])]),a._v(" "),e("p",[a._v("在Cache-Control 中，这些值可以自由组合，多个值如果冲突时，也是有优先级的，而no-store优先级最高。我们可以测试下：在nginx中做如下配置：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("server {\n    listen 88;\n    root /opt/ms;\n    index index.php index.html index.htm index.nginx-debian.html;\n    \n    location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ {\n        add_header Cache-Control no-store;\n        add_header Cache-Control max-age=3600;\n        add_header Cache-Control public;\n        add_header Cache-Control only-if-cached;\n        add_header Cache-Control no-cache;\n        add_header Cache-Control must-revalidate;\n    }\n}\n")])])]),e("p",[a._v("在/opt/ms下增加个文件type.css，内容如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a{\n    color: #000000;\n}\na:focus,a:hover {\n    text-decoration: none;\n    color: #708090;\n}\n")])])]),e("p",[a._v("配置好之后，reload下nginx，在浏览器访问地址http://127.0.0.1:88/type.css，可以看到响应头部包含nginx配置中的字段：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/1541213674.png",alt:"cache5.png"}})]),a._v(" "),e("p",[a._v("重复刷新访问，会发现每次的状态码都是200，原因是no-store的优先级最高，本地不保存，每次都需要服务器发送资源。")]),a._v(" "),e("p",[e("strong",[a._v("public和private的选择")])]),a._v(" "),e("p",[a._v("如果你用了CDN，你需要关注下这个值。CDN厂商一般会要求cache-control的值为public，提升缓存命中率。如果你的缓存命中率很低，而访问量很大的话，可以看下是不是设置了private，no-cache这类的值。如果定义了max-age，可以不用再定义public，它们的意义是一样的。")]),a._v(" "),e("h4",{attrs:{id:"哪里设置cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哪里设置cache-control"}},[a._v("#")]),a._v(" 哪里设置Cache-Control")]),a._v(" "),e("p",[a._v("以LNMP的环境为例，一次响应经历的过程是：php-cgi解析代码并执行，将结果返回给nginx，如果nginx前面有反向代理，则会经过一次反向代理服务器，所以cache-control可能会在nginx，php-cgi，php代码，反向代理服务器这些地方地方设置。在php.ini中，有个参数是session.cache_limiter，需要注意下。在nginx中有个很常见的配置：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { \n            expires      30d;\n\t}\n")])])]),e("p",[a._v("这个指令等同于cache-control: max-age=2592000，同时你会在响应头部看到一个etag字段，这是由于nginx默认开启，如果要关闭可以增加个配置"),e("code",[a._v("etag off")]),a._v("。这个etag就是我们接下要看的缓存校验字段。")]),a._v(" "),e("h2",{attrs:{id:"缓存校验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存校验"}},[a._v("#")]),a._v(" 缓存校验")]),a._v(" "),e("p",[a._v("在缓存中，我们需要一个机制来验证缓存是否有效。比如服务器的资源更新了，客户端需要及时刷新缓存；又或者客户端的资源过了有效期，但服务器上的资源还是旧的，此时并不需要重新发送。缓存校验就是用来解决这些问题的，在http 1.1 中，我们主要关注下Last-Modified 和 etag 这两个字段。")]),a._v(" "),e("h3",{attrs:{id:"last-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[a._v("#")]),a._v(" Last-Modified")]),a._v(" "),e("p",[a._v("服务端在返回资源时，会将该资源的最后更改时间通过Last-Modified字段返回给客户端。客户端下次请求时通过If-Modified-Since或者If-Unmodified-Since带上Last-Modified，服务端检查该时间是否与服务器的最后修改时间一致：如果一致，则返回304状态码，不返回资源；如果不一致则返回200和修改后的资源，并带上新的时间。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/2932028749.png",alt:"cache6.png"}})]),a._v(" "),e("p",[a._v("If-Modified-Since和If-Unmodified-Since的区别是：")]),a._v(" "),e("p",[e("strong",[a._v("If-Modified-Since")]),a._v("：告诉服务器如果时间一致，返回状态码304")]),a._v(" "),e("p",[e("strong",[a._v("If-Unmodified-Since")]),a._v("：告诉服务器如果时间不一致，返回状态码412")]),a._v(" "),e("h3",{attrs:{id:"etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[a._v("#")]),a._v(" etag")]),a._v(" "),e("p",[a._v("单纯的以修改时间来判断还是有缺陷，比如文件的最后修改时间变了，但内容没变。对于这样的情况，我们可以使用etag来处理。")]),a._v(" "),e("p",[a._v("etag的方式是这样：服务器通过某个算法对资源进行计算，取得一串值(类似于文件的md5值)，之后将该值通过etag返回给客户端，客户端下次请求时通过If-None-Match或If-Match带上该值，服务器对该值进行对比校验：如果一致则不要返回资源。")]),a._v(" "),e("p",[a._v("If-None-Match和If-Match的区别是：")]),a._v(" "),e("p",[e("strong",[a._v("If-None-Match")]),a._v("：告诉服务器如果一致，返回状态码304，不一致则返回资源")]),a._v(" "),e("p",[e("strong",[a._v("If-Match")]),a._v("：告诉服务器如果不一致，返回状态码412")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("ol",[e("li",[a._v("缓存开关是： pragma， cache-control。")]),a._v(" "),e("li",[a._v("缓存校验有：Expires，Last-Modified，etag。")]),a._v(" "),e("li",[a._v("从状态码的角度来看，它们的关系如下图：\n"),e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/3080838214.png",alt:"cache7.png"}})]),a._v(" "),e("li",[a._v("cache-control的各个值关系如下图\n"),e("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2018/09/4151287010.png",alt:"cache8.png"}})])]),a._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),e("p",[e("a",{attrs:{href:"http://imweb.io/topic/5795dcb6fb312541492eda8c",target:"_blank",rel:"noopener noreferrer"}},[a._v("HTTP缓存控制小结"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching",target:"_blank",rel:"noopener noreferrer"}},[a._v("HTTP 缓存"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=o.exports}}]);