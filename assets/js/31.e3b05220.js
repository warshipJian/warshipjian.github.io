(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{382:function(a,t,e){"use strict";e.r(t);var s=e(26),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"使用canal同步mysql数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用canal同步mysql数据"}},[a._v("#")]),a._v(" 使用canal同步mysql数据")]),a._v(" "),e("h2",{attrs:{id:"场景："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景："}},[a._v("#")]),a._v(" 场景：")]),a._v(" "),e("p",[a._v("有两个独立的MySql数据库A和B")]),a._v(" "),e("p",[a._v("数据库A中有个表名为news，该表三个字段：")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("字段")]),a._v(" "),e("th",[a._v("type")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("id")]),a._v(" "),e("td",[a._v("INT")])]),a._v(" "),e("tr",[e("td",[a._v("title")]),a._v(" "),e("td",[a._v("VARCHAR")])]),a._v(" "),e("tr",[e("td",[a._v("data")]),a._v(" "),e("td",[a._v("LONGTEXT")])])])]),a._v(" "),e("p",[a._v("数据库B中有两个表，news1 和 news 2, 如下")]),a._v(" "),e("p",[a._v("news 1")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("字段")]),a._v(" "),e("th",[a._v("type")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("id")]),a._v(" "),e("td",[a._v("INT")])]),a._v(" "),e("tr",[e("td",[a._v("title")]),a._v(" "),e("td",[a._v("VARCHAR")])])])]),a._v(" "),e("p",[a._v("news 2")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("字段")]),a._v(" "),e("th",[a._v("type")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("news_id")]),a._v(" "),e("td",[a._v("INT")])]),a._v(" "),e("tr",[e("td",[a._v("data")]),a._v(" "),e("td",[a._v("LONGTEXT")])])])]),a._v(" "),e("p",[a._v("如果要同步数据库A的news到数据库B的new1和new2，传统的同步方式满足不了")]),a._v(" "),e("h2",{attrs:{id:"实现思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现思路"}},[a._v("#")]),a._v(" 实现思路")]),a._v(" "),e("p",[a._v("利用canal获取数据库A中news的变化数据(增，删，改)")]),a._v(" "),e("p",[a._v("利用canal_mysql_nosql_sync将变化的数据存入到redis队列\n(https://github.com/liukelin/canal_mysql_nosql_sync)")]),a._v(" "),e("p",[a._v("起一个守护脚本一直消费该redis，将变化的数据写入到数据库B")]),a._v(" "),e("p",[a._v("整个过程如下:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("数据库A -> canal_server -> canal_client / canal_mysql_nosql_sync -> redis -> 脚本处理 -> 数据库B\n")])])]),e("h2",{attrs:{id:"实施步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实施步骤"}},[a._v("#")]),a._v(" 实施步骤")]),a._v(" "),e("h3",{attrs:{id:"一-配置canal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-配置canal"}},[a._v("#")]),a._v(" 一.配置canal")]),a._v(" "),e("p",[a._v("**1.**确定服务器上有java环境，如果没有需安装下java")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# java -version\njava version "1.8.0_121"\n')])])]),e("p",[a._v("**2.**获取canal包")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("访问https://github.com/alibaba/canal/releases，下载相应的版本\n本次以1.0.24为例\nwget https://github.com/alibaba/canal/releases/download/canal-1.0.24/canal.deployer-1.0.24.tar.gz\n")])])]),e("p",[a._v("**3.**解压并配置")]),a._v(" "),e("p",[a._v("详细的配置参数可参考https://github.com/alibaba/canal/wiki/AdminGuide")]),a._v(" "),e("p",[a._v("将安装包解压后，默认有如下文件夹")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# ls\nbin  conf  lib  logs\n")])])]),e("p",[a._v("canal的主配置文件为/conf/canal.properties，这里可以配置监听的端口等")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("canal.id= 2\ncanal.ip=\ncanal.port= 11111\ncanal.zkServers=\n")])])]),e("p",[a._v("编辑example的配置文件")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("vim ./conf/example/instance.properties\n配置好数据库的相关信息\ncanal.instance.master.address = 127.0.0.1:3306\n\n# username/password\ncanal.instance.dbUsername = root\ncanal.instance.dbPassword = root123456\ncanal.instance.defaultDatabaseName = news\ncanal.instance.connectionCharset = UTF-8\n\n配置下正则表达式，用于指定要同步的表\n# table regex\ncanal.instance.filter.regex = .* \n# table black regex\ncanal.instance.filter.black.regex = platform_news\\\\..*\n")])])]),e("p",[a._v("这里注意下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("canal.instance.filter.regex的白名单配置是无效的，不用配置\n如果要指定库和表，可以把不同步的库和表写到canal.instance.filter.black.regex配置中，黑名单的配置有效.\n比如我不要同步test这个数据库，则可以这样写\ncanal.instance.filter.black.regex = test\\\\..*\n")])])]),e("p",[a._v("配置完成后,启动服务")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sh bin/startup.sh\n启动完成后，会看到有个端口号为11111的进程\n")])])]),e("h3",{attrs:{id:"二-部署canal-mysql-nosql-sync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-部署canal-mysql-nosql-sync"}},[a._v("#")]),a._v(" 二.部署canal_mysql_nosql_sync")]),a._v(" "),e("p",[a._v("**1.**获取canal_mysql_nosql_sync")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("git clone https://github.com/liukelin/canal_mysql_nosql_sync\n")])])]),e("p",[a._v("**2.**配置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("cd canal_mysql_nosql_sync/canal-client/conf\nvim canal.properties\n配置好对应参数即可,注意下canal.binlog.dir路径\n")])])]),e("p",[a._v("**3.**启动")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sh ./canal_mysql_nosql_sync/canal-client/start_canal_client.sh\n\n正常启动后，去项目A的表中改个数据，可立即看到变化\n")])])]),e("h3",{attrs:{id:"三-通过脚本获取redis数据，并写入到数据库b中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-通过脚本获取redis数据，并写入到数据库b中"}},[a._v("#")]),a._v(" 三.通过脚本获取redis数据，并写入到数据库B中")]),a._v(" "),e("p",[e("strong",[a._v("1.")]),a._v(" 连接redis，获取redis中变化的数据，任意语言都可以，只要能使用redis和mysql即可。")]),a._v(" "),e("p",[a._v("以PHP为例:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("        $predis = new \\Predis\\Client('tcp://172.16.93.239:2889');\n        $predis->connect();\n        $msg = $predis->lpop('canal_binlog_data');\n        $predis->disconnect();\n")])])]),e("p",[a._v("获取的数据结构如下:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("eventType ：操作类型（UPDATE/INSERT/DELETE）\n\ndb：   涉及库\n\ntable: 涉及表\n\nbefore:变更前数据\n\nafter: 变更后数据\n\ntime:  操作时间\n")])])]),e("p",[a._v("**2.**提取出变化的数据，根据eventType，将数据更新到数据库B中")]),a._v(" "),e("h3",{attrs:{id:"故障排除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#故障排除"}},[a._v("#")]),a._v(" 故障排除")]),a._v(" "),e("p",[a._v("启动canal时，提示Could not find first log file name in binary log index file")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("需删除example下的meta.dat文件，再重新启动\n")])])]),e("p",[a._v("redis中没数据")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1.确保数据库是ROW模式\n2.数据库的用户需要有slave权限\n3.看下canal的logs/example/meta.log文件是否有更新\n4.看下canal_client中canal.binlog.dir路径下的文件是否有更新\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);