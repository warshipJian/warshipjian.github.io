(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{380:function(t,s,a){"use strict";a.r(s);var n=a(26),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"linux-进程-01-进程和fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-进程-01-进程和fork"}},[t._v("#")]),t._v(" linux-进程-01-进程和fork")]),t._v(" "),a("p",[t._v("linux有三座大山：进程，内存，io。跨过了这三座大山，你就能看到更精彩的世界！\n今天开始总结进程。")]),t._v(" "),a("h2",{attrs:{id:"linux源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux源码"}},[t._v("#")]),t._v(" linux源码")]),t._v(" "),a("p",[t._v("linux源码在/usr/src下，主要目录的用途：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("include/ 建立内核代码时所需要的大部分包含文件\ninit/ 内核的初始化代码\narch/ 所有硬件结构的内核代码\ndrivers/ 所有设备驱动程序\nfs/ 所有的文件系统代码\nnet/ 内核中关于网络的代码\nmm/ 内存管理的代码\nipc/ 进程间通信的代码\nkernel/ 内核的主体代码\n")])])]),a("h2",{attrs:{id:"进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),a("h3",{attrs:{id:"进程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程是什么"}},[t._v("#")]),t._v(" 进程是什么")]),t._v(" "),a("p",[t._v("在linux中，进程是资源的分配单位，它关注的是资源方面的内容，如：内存，文件系统，打开的文件，信号等。linux是通过task_struct来管理进程，该结构体定义在include/linux/sched.h文件中，包含的主要内容有：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pid;   // 进程的pid\n*mm;  // 内存资源\n*fs;  // 文件系统\n*files;  // 文件资源，如打开的文件\n*signal; // 信号\n...\n")])])]),a("p",[a("img",{attrs:{src:"https://img.xiaoxiaoguo.cn/usr/uploads/2019/02/708950447.png",alt:"task_struct.png"}}),t._v("\n当我们说到进程时，就是说一个包含了内存，句柄文件，pid等的东西。假设linux的内存是一个蛋糕，则某个进程占用的内存就是在这个蛋糕上切下的一小块。")]),t._v(" "),a("h3",{attrs:{id:"线程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程是什么"}},[t._v("#")]),t._v(" 线程是什么")]),t._v(" "),a("p",[t._v("从资源的角度来说，线程是粒度比进程更细的单位。同一个进程中，可能会有多个线程，它们共享资源。")]),t._v(" "),a("p",[t._v("怎么理解呢？")]),t._v(" "),a("p",[t._v("假设有两个程序A和B，当linux执行A时，会先加载A的上下文，然后执行A，完成后保存A的上下文，然后加载B的上下文，执行B。")]),t._v(" "),a("p",[t._v("假设A由a,b,c三个模块组成，则在进行A时，会执行a,b,c，这些模块的执行不需要上下文切换，共享A的上下文，即共享A的资源。")]),t._v(" "),a("p",[t._v("A的整个执行过程为：A获得CPU -> CPU加载A的上下文 -> 执行a -> 执行b -> 执行c -> CPU保存A的上下文 。")]),t._v(" "),a("p",[a("strong",[t._v("A和B就是进程，a,b,c就是线程")])]),t._v(" "),a("p",[a("strong",[t._v("在linux中，所有符合task_struct结构体的程序，都可以被调度运行。")]),t._v(" 在后面的表述中，不会去纠结叫线程还是进程，关注task_struct结构体即可。")]),t._v(" "),a("h2",{attrs:{id:"pid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pid"}},[t._v("#")]),t._v(" pid")]),t._v(" "),a("p",[t._v("每个进程都会有一个pid。linux的pid数量是有限的，具体数量在"),a("code",[t._v("/proc/sys/kernel/pid_max")]),t._v("中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[root@localhost ~]# cat /proc/sys/kernel/pid_max \n32768\n")])])]),a("p",[t._v("当某个进程结束后，该pid会回收，之后分配给新的进程。")]),t._v(" "),a("p",[t._v("pid的分配规则如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1). 进程pid分配范围为(300, pid_max)，这是由于pid<300的情况值允许分配一次。\n2). 每个pid分配成功，便会把当前的pid设置到last_pid， 那么下次pid的分配便是从last_pid+1开始往下查找。也就是说pid的分配是从300开始累加的，比如当前最大pid为2035，则下一个进程获得的pid为2036。\n3). 当pid分配完最大值时，则从之前回收的最小pid分配，如此循环利用。\n")])])]),a("p",[t._v("如果所有的pid都分配完了，没有可用的pid时会怎么样呢？答案是无法创建新的进程，以及你可能要重启系统^_^。")]),t._v(" "),a("p",[t._v("最典型的一个列子是fork炸弹：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(":(){:|:&};:\n\n// 冒号表示一个函数，你可以用其他任意字符代替它，这个函数的内容是调用自己，即递归调用，&是将该函数放到后台执行，分号结束后，使用冒号执行该函数。\n")])])]),a("p",[t._v("在linux执行这段命令，不一会儿系统就会崩溃。它的原理就是不断地fork新进程，将系统的pid耗尽。")]),t._v(" "),a("h2",{attrs:{id:"fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork"}},[t._v("#")]),t._v(" fork")]),t._v(" "),a("p",[t._v("在linux中，有个fork函数，它的作用是创建一个与原来进程几乎完全相同的进程。为什么说是几乎呢，因为fork之后，它们可能会执行不同的代码。")]),t._v(" "),a("p",[t._v("先看个简单的fork例子：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("运行这段代码，你会看到最终打印了6个hello。")]),t._v(" "),a("p",[t._v("第一次fork时，产生了两个进程，所以打印两次hello，之后第二次fork，每个进程又产生一个，最终有四个进程，所以第二次打印时，会看到打印了4个hello。")]),t._v(" "),a("p",[t._v("如何做到fork后，这两个进程做不同的事情呢，一个简单的例子如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tpid_t pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("wait_pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tpid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cannot create new process"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("运行这段代码，你会看到屏幕会打印ac,bc，原因是fork有如下特性：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1). 在父进程中，fork返回新创建子进程的进程ID；\n2). 在子进程中，fork返回0；\n3). 如果出现错误，fork返回一个负值；\n")])])]),a("p",[t._v("利用fork的返回值，我们就可以做不同的事情了。")]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("本次主要总结了：")]),t._v(" "),a("ol",[a("li",[t._v("进程的定义")]),t._v(" "),a("li",[t._v("task_struct结构体")]),t._v(" "),a("li",[t._v("pid")]),t._v(" "),a("li",[t._v("fork")])]),t._v(" "),a("p",[t._v("顺带说了下linux源码的位置即个目录用途，方便阅读查找。")]),t._v(" "),a("p",[t._v("下次我们看下进程的生命周期。")])])}),[],!1,null,null,null);s.default=r.exports}}]);